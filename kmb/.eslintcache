[{"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\index.js":"1","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\reportWebVitals.js":"2","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\NewTaskForm.js":"3","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\AppContext.js":"4","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\AppState.js":"5","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\AppReducer.js":"6","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\types.js":"7","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TaskCard.js":"8","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TaskRoller.js":"9","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TimeOfDay.js":"10","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\Header.js":"11","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\Footer.js":"12","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\helpers\\SelectRandomTask.js":"13","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\CountdownTimer.js":"14","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\routes.js":"15","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\Header\\index.js":"16","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\Login\\index.js":"17","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\Home\\index.js":"18","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\SignUp\\index.js":"19","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\hoc\\ProtectedRoute.js":"20","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\hooks\\useLocalStorage.js":"21","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\helpers\\inputs.js":"22","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\helpers\\httpRequests.js":"23"},{"size":707,"mtime":1614914507657,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1606676319960,"results":"26","hashOfConfig":"25"},{"size":5227,"mtime":1612228669613,"results":"27","hashOfConfig":"25"},{"size":107,"mtime":1611098590920,"results":"28","hashOfConfig":"25"},{"size":1143,"mtime":1612301447437,"results":"29","hashOfConfig":"25"},{"size":735,"mtime":1614290607493,"results":"30","hashOfConfig":"25"},{"size":135,"mtime":1612301395445,"results":"31","hashOfConfig":"25"},{"size":1072,"mtime":1612225954380,"results":"32","hashOfConfig":"25"},{"size":3143,"mtime":1614287326782,"results":"33","hashOfConfig":"25"},{"size":1994,"mtime":1614280028756,"results":"34","hashOfConfig":"25"},{"size":428,"mtime":1612224728961,"results":"35","hashOfConfig":"25"},{"size":1039,"mtime":1613451858283,"results":"36","hashOfConfig":"25"},{"size":622,"mtime":1612296762463,"results":"37","hashOfConfig":"25"},{"size":531,"mtime":1614290562176,"results":"38","hashOfConfig":"25"},{"size":613,"mtime":1614916076579,"results":"39","hashOfConfig":"25"},{"size":1683,"mtime":1614916184961,"results":"40","hashOfConfig":"25"},{"size":2986,"mtime":1614915895965,"results":"41","hashOfConfig":"25"},{"size":5762,"mtime":1614915640573,"results":"42","hashOfConfig":"25"},{"size":3645,"mtime":1614915948231,"results":"43","hashOfConfig":"25"},{"size":572,"mtime":1614913963547,"results":"44","hashOfConfig":"25"},{"size":1278,"mtime":1614914452874,"results":"45","hashOfConfig":"25"},{"size":517,"mtime":1614915714358,"results":"46","hashOfConfig":"25"},{"size":1004,"mtime":1614915714310,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"etp770",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\index.js",[],["100","101"],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\reportWebVitals.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\NewTaskForm.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\AppContext.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\AppState.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\AppReducer.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\types.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TaskCard.js",[],["102","103"],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TaskRoller.js",["104"],"import { useContext, useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport DoneOutlineIcon from '@material-ui/icons/DoneOutline';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\n\r\nimport AppContext from '../context/AppContext';\r\n\r\nimport { RandomTask } from '../helpers/SelectRandomTask';\r\n\r\n/**\r\n * Design Goals:\r\n *  - Need to have accept reject buttons span 100% across the card, dividing card in half\r\n *  - Have card centered\r\n *  - \r\n */\r\nconst useStyles = makeStyles({\r\n  root: {\r\n\r\n  },\r\n  accept: {\r\n    backgroundColor: 'green',\r\n    color: 'white'\r\n  },\r\n  reject: {\r\n    backgroundColor: 'red',\r\n    color: 'white'\r\n  }\r\n})\r\n\r\nexport default function TaskRoller({ duration, tod }) {\r\n  const classes = useStyles();\r\n  const appContext = useContext(AppContext);\r\n\r\n  const [values, setValues] = useState({\r\n    tasks: null,\r\n    taskNo: 0,\r\n  })\r\n\r\n  const handleAccept = () => {\r\n    let task = values.tasks[values.taskNo];\r\n    appContext.newCurrentTask(task);\r\n  }\r\n\r\n  const handleReject = () => {\r\n    setValues({\r\n      ...values,\r\n      taskNo: values.taskNo + 1,\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    let theTasks = RandomTask(appContext.tasks, duration, tod);\r\n    setValues({\r\n      ...values,\r\n      tasks: theTasks,\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {values.tasks ?\r\n        values.taskNo !== values.tasks.length ?\r\n          <div>\r\n            <Card className={classes.root}>\r\n              <CardContent>\r\n                <Typography variant=\"h5\" component=\"h2\" >\r\n                  {values.tasks[values.taskNo].taskName}\r\n                </Typography>\r\n                <Typography color=\"textSecondary\">\r\n                  {values.tasks[values.taskNo].minutes} minutes\r\n                </Typography>\r\n                <Typography color=\"textSecondary\">\r\n                  {values.tasks[values.taskNo].notes}\r\n                </Typography>\r\n              </CardContent>\r\n              <CardActions>\r\n                <IconButton className={classes.accept} onClick={handleAccept} color=\"primary\" aria-label=\"check\" component=\"span\">\r\n                  <DoneOutlineIcon />\r\n                </IconButton>\r\n                <IconButton className={classes.reject} onClick={handleReject} color=\"secondary\" aria-label=\"check\" component=\"span\">\r\n                  <CloseIcon />\r\n                </IconButton>\r\n              </CardActions>\r\n            </Card>\r\n          </div>\r\n          : \r\n          <div>\r\n            <Card className={classes.root}>\r\n              <CardContent>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                  There are no more tasks available with these filters.\r\n                  Go read a book.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        : null\r\n      }\r\n    </>\r\n  )\r\n}","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TimeOfDay.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\Header.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\Footer.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\helpers\\SelectRandomTask.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\CountdownTimer.js",["105"],"import { useState, useEffect, useContext } from 'react';\r\n\r\nexport default function CountdownTimer({ time }) {\r\n    const [timeLeft, setTimeLeft] = useState(time * 60);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setTimeLeft(timeLeft => timeLeft - 1);\r\n        }, 1000);\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {Math.floor(timeLeft / 60)}:{(timeLeft % 60) < 10 ? '0' + (timeLeft % 60) : timeLeft % 60}\r\n        </div>\r\n    )\r\n}","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\routes.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\Header\\index.js",["106","107"],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\Login\\index.js",["108","109","110","111"],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\Home\\index.js",["112"],"import { useState, useContext, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nimport NewTaskForm from '../../components/NewTaskForm';\r\nimport TaskRoller from '../../components/TaskRoller';\r\nimport TimeOfDay from '../../components/TimeOfDay';\r\nimport CountdownTimer from '../../components/CountdownTimer';\r\n\r\nimport AppContext from '../../context/AppContext';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    textAlign: 'center',\r\n    fontFamily: 'sans-serif',\r\n    fontSize: '30px'\r\n  },\r\n  columns: {\r\n    textAlign: 'center',\r\n    display: 'flex',\r\n    width: '100%',\r\n  },\r\n  column: {\r\n    width: '33.3%',\r\n    background: '#1abc9c',\r\n  },\r\n  card: {\r\n    boxShadow: '0 8px 24px 0 rgba(0,0,0,0.12)',\r\n    margin: 50,\r\n    padding: 12,\r\n    borderRadius: '1.5rem',\r\n  },\r\n  cardHeader: {\r\n    background: '#1abc9c',\r\n    color: 'white',\r\n    fontFamily: 'sans-serif',\r\n    borderRadius: '1.5rem',\r\n  },\r\n  column1: {\r\n    textAlign: 'center',\r\n    fontFamily: 'sans-serif',\r\n    fontSize: '30px'\r\n  },\r\n  title: {\r\n    color: 'white'\r\n  },\r\n  currentTaskColumn: {\r\n    backgroundColor: 'white',\r\n    borderRadius: '1.5rem',\r\n  },\r\n  currentTaskButtons: {\r\n\r\n  },\r\n  currentTaskButtonC: {\r\n    margin: 10,\r\n    backgroundColor: 'green',\r\n    color: 'white'\r\n  },\r\n  currentTaskButtonF: {\r\n    margin: 10,\r\n    backgroundColor: 'red',\r\n    color: 'white'\r\n  }\r\n})\r\n\r\nexport default function Home() {\r\n  const classes = useStyles();\r\n  const appContext = useContext(AppContext);\r\n\r\n  const [values, setValues] = useState({\r\n    taskNum: null,\r\n    taskTime: false,\r\n    duration: 60,\r\n    anytime: false,\r\n    morning: false,\r\n    afternoon: false,\r\n    night: false,\r\n    tod: [],\r\n    currentTask: null,\r\n  })\r\n\r\n  const handleDurationChange = (e, newValue) => {\r\n    setValues({\r\n      ...values,\r\n      duration: newValue\r\n    })\r\n  }\r\n\r\n  const handleClick = event => {\r\n    if (!appContext.tasks) {\r\n      // Alert the user there is no tasks \r\n    } else {\r\n      let tod = [];\r\n\r\n      if (values.morning) {\r\n        tod.push('morning')\r\n      }\r\n      if (values.afternoon) {\r\n        tod.push('afternoon')\r\n      }\r\n      if (values.night) {\r\n        tod.push('night')\r\n      }\r\n      if (values.anytime) {\r\n        tod.push('anytime')\r\n      }\r\n\r\n      setValues({\r\n        ...values,\r\n        taskTime: true,\r\n        tod: tod,\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleTaskCompletedFailed = (status) => { // status is a string, either \"completed\" or \"failed\"\r\n    setValues({\r\n      ...values,\r\n      taskTime: false\r\n    });\r\n    appContext.newCurrentTask(null);\r\n    /*  Need to make a task logged fetch request here,\r\n        record the task, the completion status, time left if failed, time left if completed,\r\n        current time */\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.columns}>\r\n        <div className={classes.column}>\r\n          <div className={classes.column1}>\r\n            <Card className={classes.card}>\r\n              <Box className={classes.cardHeader}>\r\n                <Typography variant=\"h4\" component=\"h4\">\r\n                  New Task\r\n                </Typography>\r\n                <NewTaskForm />\r\n              </Box>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n        <div className={classes.column}>\r\n          <div className={classes.title}>\r\n            Wondering what to do right now?\r\n          </div>\r\n          {appContext.currentTask === null && values.taskTime \r\n            ? <TaskRoller duration={values.duration} tod={values.tod} />\r\n            : <div>\r\n                <Slider\r\n                  min={0}\r\n                  step={30}\r\n                  max={300}\r\n                  marks\r\n                  value={values.duration}\r\n                  onChange={handleDurationChange}\r\n                  valueLabelDisplay=\"auto\"\r\n                />\r\n                <TimeOfDay \r\n                  row={true} \r\n                  values={values} \r\n                  setValues={setValues} />\r\n                <Button \r\n                  disabled={appContext.tasks.length === 0 || values.duration === 0 || (values.anytime === false && values.morning === false && values.afternoon === false && values.night === false)} \r\n                  variant=\"contained\" \r\n                  color=\"primary\" \r\n                  onClick={handleClick}>Click Me!</Button>\r\n              </div>\r\n          }\r\n        </div>\r\n        <div className={classes.column}>\r\n          {/* TODO: Timer over here with last task, if ongoing - time is counting down from the initial time that was given when created,\r\n            if ongoing (and 'Click Me' is pressed) - a red 'X' appears over the timer and task is reported as incompleted \r\n            if done (timer expired) - green checkmark shows and task is reported as completed*/}\r\n          {appContext.currentTask !== null ?\r\n            <div className={classes.currentTaskColumn}>\r\n              <div>\r\n                <CountdownTimer time={appContext.currentTask.minutes} />\r\n              </div>\r\n              <div className={classes.currentTaskButtons}>\r\n                <Button className={classes.currentTaskButtonC} onClick={() => handleTaskCompletedFailed(\"completed\")}>Completed</Button>\r\n                <Button className={classes.currentTaskButtonF} onClick={() => handleTaskCompletedFailed(\"failed\")}>Failed</Button>\r\n              </div>\r\n            </div>\r\n            : null\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\SignUp\\index.js",["113","114","115","116"],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\hoc\\ProtectedRoute.js",["117"],"import { Route, Redirect } from 'react-router-dom';\r\n\r\nimport useLocalStorage from '../hooks/useLocalStorage';\r\n\r\nconst ProtectedRoute = ({ component: Component, rest }) => {\r\n  const [accessToken, setAccessToken] = useLocalStorage('token', null);\r\n\r\n  return (\r\n    <Route render={\r\n      rest => {\r\n        if (accessToken) {\r\n          return <Component {...rest} />\r\n        } else {\r\n          return <Redirect to={\r\n            {\r\n              pathname: '/login'\r\n            }\r\n          } />\r\n        }\r\n      }\r\n    } />\r\n  )\r\n}\r\n\r\nexport default ProtectedRoute;","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\hooks\\useLocalStorage.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\helpers\\inputs.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\helpers\\httpRequests.js",[],{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"118","replacedBy":"122"},{"ruleId":"120","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":63,"column":6,"nodeType":"126","endLine":63,"endColumn":8,"suggestions":"127"},{"ruleId":"128","severity":1,"message":"129","line":1,"column":31,"nodeType":"130","messageId":"131","endLine":1,"endColumn":41},{"ruleId":"128","severity":1,"message":"132","line":1,"column":10,"nodeType":"130","messageId":"131","endLine":1,"endColumn":19},{"ruleId":"128","severity":1,"message":"133","line":1,"column":21,"nodeType":"130","messageId":"131","endLine":1,"endColumn":29},{"ruleId":"128","severity":1,"message":"134","line":7,"column":8,"nodeType":"130","messageId":"131","endLine":7,"endColumn":24},{"ruleId":"128","severity":1,"message":"135","line":12,"column":10,"nodeType":"130","messageId":"131","endLine":12,"endColumn":18},{"ruleId":"128","severity":1,"message":"136","line":36,"column":7,"nodeType":"130","messageId":"131","endLine":36,"endColumn":17},{"ruleId":"128","severity":1,"message":"137","line":50,"column":23,"nodeType":"130","messageId":"131","endLine":50,"endColumn":37},{"ruleId":"128","severity":1,"message":"132","line":1,"column":32,"nodeType":"130","messageId":"131","endLine":1,"endColumn":41},{"ruleId":"128","severity":1,"message":"134","line":7,"column":8,"nodeType":"130","messageId":"131","endLine":7,"endColumn":24},{"ruleId":"128","severity":1,"message":"135","line":12,"column":10,"nodeType":"130","messageId":"131","endLine":12,"endColumn":18},{"ruleId":"128","severity":1,"message":"136","line":36,"column":7,"nodeType":"130","messageId":"131","endLine":36,"endColumn":17},{"ruleId":"128","severity":1,"message":"137","line":52,"column":23,"nodeType":"130","messageId":"131","endLine":52,"endColumn":37},{"ruleId":"128","severity":1,"message":"137","line":6,"column":23,"nodeType":"130","messageId":"131","endLine":6,"endColumn":37},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],["138"],["139"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'appContext.tasks', 'duration', 'tod', and 'values'. Either include them or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.","ArrayExpression",["140"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","'FormControlLabel' is defined but never used.","'PostData' is defined but never used.","'appContext' is assigned a value but never used.","'setAccessToken' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"141","fix":"142"},"Update the dependencies array to be: [appContext.tasks, duration, tod, values]",{"range":"143","text":"144"},[1580,1582],"[appContext.tasks, duration, tod, values]"]
[{"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\index.js":"1","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\reportWebVitals.js":"2","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\NewTaskForm.js":"3","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\AppContext.js":"4","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\AppState.js":"5","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\AppReducer.js":"6","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\types.js":"7","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TaskCard.js":"8","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TaskRoller.js":"9","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TimeOfDay.js":"10","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\Header.js":"11","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\Footer.js":"12","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\helpers\\SelectRandomTask.js":"13","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\CountdownTimer.js":"14","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\routes.js":"15","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\Header\\index.js":"16","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\Login\\index.js":"17","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\Home\\index.js":"18","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\SignUp\\index.js":"19","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\hoc\\ProtectedRoute.js":"20","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\hooks\\useLocalStorage.js":"21","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\helpers\\inputs.js":"22","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\helpers\\httpRequests.js":"23","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\Tasks\\index.js":"24","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TaskCard\\SelectableTaskCard.js":"25","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TaskCard\\EditableTaskCard.js":"26","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\EditTask.js":"27","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\Profile\\index.js":"28","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\Analytics\\index.js":"29"},{"size":733,"mtime":1614916310752,"results":"30","hashOfConfig":"31"},{"size":362,"mtime":1606676319960,"results":"32","hashOfConfig":"31"},{"size":5227,"mtime":1612228669613,"results":"33","hashOfConfig":"31"},{"size":107,"mtime":1611098590920,"results":"34","hashOfConfig":"31"},{"size":1136,"mtime":1622241345818,"results":"35","hashOfConfig":"31"},{"size":767,"mtime":1622241412721,"results":"36","hashOfConfig":"31"},{"size":135,"mtime":1612301395445,"results":"37","hashOfConfig":"31"},{"size":1064,"mtime":1615775966947,"results":"38","hashOfConfig":"31"},{"size":3143,"mtime":1614287326782,"results":"39","hashOfConfig":"31"},{"size":1994,"mtime":1614280028756,"results":"40","hashOfConfig":"31"},{"size":428,"mtime":1612224728961,"results":"41","hashOfConfig":"31"},{"size":1039,"mtime":1613451858283,"results":"42","hashOfConfig":"31"},{"size":622,"mtime":1612296762463,"results":"43","hashOfConfig":"31"},{"size":531,"mtime":1614290562176,"results":"44","hashOfConfig":"31"},{"size":940,"mtime":1622406464842,"results":"45","hashOfConfig":"31"},{"size":2992,"mtime":1622586098105,"results":"46","hashOfConfig":"31"},{"size":2991,"mtime":1622237988854,"results":"47","hashOfConfig":"31"},{"size":5100,"mtime":1623382295908,"results":"48","hashOfConfig":"31"},{"size":3645,"mtime":1614916310747,"results":"49","hashOfConfig":"31"},{"size":572,"mtime":1615777508908,"results":"50","hashOfConfig":"31"},{"size":1278,"mtime":1614916310751,"results":"51","hashOfConfig":"31"},{"size":517,"mtime":1614916310749,"results":"52","hashOfConfig":"31"},{"size":1912,"mtime":1615771246290,"results":"53","hashOfConfig":"31"},{"size":3216,"mtime":1615827907709,"results":"54","hashOfConfig":"31"},{"size":1132,"mtime":1615776488100,"results":"55","hashOfConfig":"31"},{"size":1912,"mtime":1615778341492,"results":"56","hashOfConfig":"31"},{"size":91,"mtime":1615778301722,"results":"57","hashOfConfig":"31"},{"size":86,"mtime":1622239402617,"results":"58","hashOfConfig":"31"},{"size":88,"mtime":1622239470956,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"etp770",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"62"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"62"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"62"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\index.js",[],["127","128"],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\reportWebVitals.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\NewTaskForm.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\AppContext.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\AppState.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\AppReducer.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\types.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TaskCard.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TaskRoller.js",["129"],"import { useContext, useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport DoneOutlineIcon from '@material-ui/icons/DoneOutline';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\n\r\nimport AppContext from '../context/AppContext';\r\n\r\nimport { RandomTask } from '../helpers/SelectRandomTask';\r\n\r\n/**\r\n * Design Goals:\r\n *  - Need to have accept reject buttons span 100% across the card, dividing card in half\r\n *  - Have card centered\r\n *  - \r\n */\r\nconst useStyles = makeStyles({\r\n  root: {\r\n\r\n  },\r\n  accept: {\r\n    backgroundColor: 'green',\r\n    color: 'white'\r\n  },\r\n  reject: {\r\n    backgroundColor: 'red',\r\n    color: 'white'\r\n  }\r\n})\r\n\r\nexport default function TaskRoller({ duration, tod }) {\r\n  const classes = useStyles();\r\n  const appContext = useContext(AppContext);\r\n\r\n  const [values, setValues] = useState({\r\n    tasks: null,\r\n    taskNo: 0,\r\n  })\r\n\r\n  const handleAccept = () => {\r\n    let task = values.tasks[values.taskNo];\r\n    appContext.newCurrentTask(task);\r\n  }\r\n\r\n  const handleReject = () => {\r\n    setValues({\r\n      ...values,\r\n      taskNo: values.taskNo + 1,\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    let theTasks = RandomTask(appContext.tasks, duration, tod);\r\n    setValues({\r\n      ...values,\r\n      tasks: theTasks,\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {values.tasks ?\r\n        values.taskNo !== values.tasks.length ?\r\n          <div>\r\n            <Card className={classes.root}>\r\n              <CardContent>\r\n                <Typography variant=\"h5\" component=\"h2\" >\r\n                  {values.tasks[values.taskNo].taskName}\r\n                </Typography>\r\n                <Typography color=\"textSecondary\">\r\n                  {values.tasks[values.taskNo].minutes} minutes\r\n                </Typography>\r\n                <Typography color=\"textSecondary\">\r\n                  {values.tasks[values.taskNo].notes}\r\n                </Typography>\r\n              </CardContent>\r\n              <CardActions>\r\n                <IconButton className={classes.accept} onClick={handleAccept} color=\"primary\" aria-label=\"check\" component=\"span\">\r\n                  <DoneOutlineIcon />\r\n                </IconButton>\r\n                <IconButton className={classes.reject} onClick={handleReject} color=\"secondary\" aria-label=\"check\" component=\"span\">\r\n                  <CloseIcon />\r\n                </IconButton>\r\n              </CardActions>\r\n            </Card>\r\n          </div>\r\n          : \r\n          <div>\r\n            <Card className={classes.root}>\r\n              <CardContent>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                  There are no more tasks available with these filters.\r\n                  Go read a book.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        : null\r\n      }\r\n    </>\r\n  )\r\n}","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TimeOfDay.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\Header.js",[],["130","131"],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\Footer.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\helpers\\SelectRandomTask.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\CountdownTimer.js",["132"],"import { useState, useEffect, useContext } from 'react';\r\n\r\nexport default function CountdownTimer({ time }) {\r\n    const [timeLeft, setTimeLeft] = useState(time * 60);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            setTimeLeft(timeLeft => timeLeft - 1);\r\n        }, 1000);\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {Math.floor(timeLeft / 60)}:{(timeLeft % 60) < 10 ? '0' + (timeLeft % 60) : timeLeft % 60}\r\n        </div>\r\n    )\r\n}","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\routes.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\Header\\index.js",["133","134","135","136"],"import { useContext, useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\n\r\nimport useLocalStorage from '../../hooks/useLocalStorage';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    appBar: {\r\n      backgroundColor: '#4DBD0C'\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      width: 200,\r\n      '&:hover': {\r\n        cursor: 'pointer',\r\n      },\r\n    },\r\n    navButtons: {\r\n      marginLeft: '2%',\r\n      width: '100%',\r\n      float: 'left',\r\n    },\r\n    navButton: {\r\n      color: 'white',\r\n      '&:focus': {\r\n        border: '1px solid black',\r\n        color: 'black',\r\n      },\r\n    },\r\n  }));\r\n\r\nexport default function Header() {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n\r\n  // Seems weird but I'm trying to get rerender to happen when\r\n  // localStorage value changes and that isn't happening on its own.\r\n  // Maybe using state after localstorage will do it...\r\n  const [accessToken, setAccessToken] = useLocalStorage('token', null);\r\n\r\n  const handleNavigation = (route) => {\r\n    history.push(route);\r\n  }\r\n\r\n  const handleLogout = () => {\r\n    setAccessToken(null);\r\n    history.push(\"/login\");\r\n    // TODO: need to implement unvalidateUser action (actually just change the name to reflect the new actions use of logging in, validating, with an access token\r\n    // and logging out, unvalidating, by setting access_token to null)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title} onClick={() => handleNavigation('/')}>\r\n            Keep Me Busy!\r\n          </Typography>\r\n          {accessToken ? (\r\n            <div className={classes.navButtons}>\r\n              <Button\r\n                onClick={() => handleNavigation('/analytics')}\r\n                className={classes.navButton}\r\n              >\r\n                Analytics\r\n              </Button>\r\n              <Button\r\n                onClick={() => handleNavigation('/profile')}\r\n                className={classes.navButton}\r\n              >\r\n                Profile\r\n              </Button>\r\n              <Button\r\n                onClick={() => handleNavigation('/tasks')}\r\n                className={classes.navButton}\r\n              >\r\n                Tasks\r\n              </Button>\r\n            </div>\r\n          ) : null}\r\n          {accessToken !== null ?\r\n              <Button onClick={handleLogout} color=\"inherit\">Logout</Button>\r\n            :\r\n              null\r\n            }\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\Login\\index.js",["137","138","139","140"],"import { useState, useContext } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from '@material-ui/core/Card';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nimport AppContext from '../../context/AppContext';\r\n\r\nimport { PostData } from '../../helpers/httpRequests';\r\nimport { isNullOrEmptyOrWhitespace } from '../../helpers/inputs';\r\n\r\nimport useLocalStorage from '../../hooks/useLocalStorage';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    textAlign: 'center',\r\n    padding: 100,\r\n  },\r\n  card: {\r\n    margin: 'auto',\r\n    width: '30%',\r\n    boxShadow: '10px 10px 10px 10px grey',\r\n  },\r\n  textFields: {\r\n    padding: 10,\r\n  },\r\n  submitButton: {\r\n    padding: 10,\r\n  }\r\n});\r\n\r\nexport default function Login() {\r\n  let appContext = useContext(AppContext);\r\n  let history = useHistory();\r\n  const classes = useStyles();\r\n\r\n  const [values, setValues] = useState({\r\n    username: null,\r\n    password: null,\r\n  });\r\n\r\n  const [alerts, setAlerts] = useState({\r\n    username: false,\r\n    password: false\r\n  })\r\n\r\n  const [accessToken, setAccessToken] = useLocalStorage('token', null);\r\n\r\n  const handleLogin = () => {\r\n    if (accessToken) {\r\n      history.push(\"/\");\r\n    } \r\n    \r\n    let aUsername = isNullOrEmptyOrWhitespace(values.username);\r\n    let aPassword = isNullOrEmptyOrWhitespace(values.password);\r\n\r\n    setAlerts({\r\n      username: aUsername,\r\n      password: aPassword\r\n    })\r\n    \r\n    if(aUsername || aPassword) {\r\n      return\r\n    }\r\n    \r\n    // Fetch request hur\r\n  }\r\n\r\n  if (accessToken) {\r\n    handleLogin();\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Card className={classes.card}>\r\n        <div className={classes.textFields}>\r\n          <TextField\r\n            value={values.username}\r\n            onChange={(e) => setValues({ ...values, username: e.target.value })}\r\n            label=\"Username\"\r\n            type=\"search\"\r\n            variant=\"outlined\"\r\n            />\r\n            {alerts.username ?\r\n                <Alert severity=\"error\">Input invalid</Alert>\r\n              :\r\n                null}\r\n        </div>\r\n        <div className={classes.textFields}>\r\n          <TextField\r\n            value={values.password}\r\n            onChange={(e) => setValues({ ...values, password: e.target.value })}\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            variant=\"outlined\"\r\n            />\r\n            {alerts.password ?\r\n                <Alert severity=\"error\">Input invalid</Alert>\r\n              :\r\n                null}\r\n        </div>\r\n        <div className={classes.submitButton}>\r\n          <Button \r\n            onClick={handleLogin}\r\n            variant=\"contained\"\r\n            >Login</Button>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\Home\\index.js",["141","142"],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\SignUp\\index.js",["143","144","145","146"],"import { useState, useContext } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from '@material-ui/core/Card';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nimport AppContext from '../../context/AppContext';\r\n\r\nimport { PostData } from '../../helpers/httpRequests';\r\nimport { isNullOrEmptyOrWhitespace } from '../../helpers/inputs';\r\n\r\nimport useLocalStorage from '../../hooks/useLocalStorage';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    textAlign: 'center',\r\n    padding: 100,\r\n  },\r\n  card: {\r\n    margin: 'auto',\r\n    width: '30%',\r\n    boxShadow: '10px 10px 10px grey',\r\n  },\r\n  textFields: {\r\n    padding: 10,\r\n  },\r\n  submitButton: {\r\n    padding: 10,\r\n  }\r\n});\r\n\r\nexport default function SignUp() {\r\n  let appContext = useContext(AppContext);\r\n  let history = useHistory();\r\n  const classes = useStyles();\r\n\r\n  const [values, setValues] = useState({\r\n    username: null,\r\n    password: null,\r\n    password2: null,\r\n  });\r\n\r\n  const [alerts, setAlerts] = useState({\r\n    username: false,\r\n    password: false,\r\n    password2: false,\r\n  })\r\n\r\n  const [accessToken, setAccessToken] = useLocalStorage('token', null);\r\n\r\n  const handleSignUp = () => {\r\n    if (accessToken) {\r\n      history.push(\"/\");\r\n    } \r\n    \r\n    let aUsername = isNullOrEmptyOrWhitespace(values.username);\r\n    let aPassword = isNullOrEmptyOrWhitespace(values.password);\r\n    let aPassword2 = isNullOrEmptyOrWhitespace(values.password) || values.password !== values.password2;\r\n\r\n    setAlerts({\r\n      username: aUsername,\r\n      password: aPassword,\r\n      password2: aPassword2,\r\n    })\r\n    \r\n    if(aUsername || aPassword || aPassword2) {\r\n      return\r\n    }\r\n    \r\n    // Fetch request hur\r\n  }\r\n\r\n  if (accessToken) {\r\n    handleSignUp();\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Card className={classes.card}>\r\n        <div className={classes.textFields}>\r\n          <TextField\r\n            value={values.username}\r\n            onChange={(e) => setValues({ ...values, username: e.target.value })}\r\n            label=\"Username\"\r\n            type=\"search\"\r\n            variant=\"outlined\"\r\n            />\r\n            {alerts.username ?\r\n                <Alert severity=\"error\">Input invalid</Alert>\r\n              :\r\n                null}\r\n        </div>\r\n        <div className={classes.textFields}>\r\n          <TextField\r\n            value={values.password}\r\n            onChange={(e) => setValues({ ...values, password: e.target.value })}\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            variant=\"outlined\"\r\n            />\r\n            {alerts.password ?\r\n                <Alert severity=\"error\">Input invalid</Alert>\r\n              :\r\n                null}\r\n        </div>\r\n        <div className={classes.textFields}>\r\n          <TextField\r\n            value={values.password2}\r\n            onChange={(e) => setValues({ ...values, password2: e.target.value })}\r\n            label=\"Confirm Password\"\r\n            type=\"password\"\r\n            variant=\"outlined\"\r\n            />\r\n            {alerts.password2 ?\r\n                <Alert severity=\"error\">Input invalid</Alert>\r\n              :\r\n                null}\r\n        </div>\r\n        <div className={classes.submitButton}>\r\n          <Button \r\n            onClick={handleSignUp}\r\n            variant=\"contained\"\r\n            >Sign Up</Button>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\hoc\\ProtectedRoute.js",["147"],"import { Route, Redirect } from 'react-router-dom';\r\n\r\nimport useLocalStorage from '../hooks/useLocalStorage';\r\n\r\nconst ProtectedRoute = ({ component: Component, rest }) => {\r\n  const [accessToken, setAccessToken] = useLocalStorage('token', null);\r\n\r\n  return (\r\n    <Route render={\r\n      rest => {\r\n        if (accessToken) {\r\n          return <Component {...rest} />\r\n        } else {\r\n          return <Redirect to={\r\n            {\r\n              pathname: '/login'\r\n            }\r\n          } />\r\n        }\r\n      }\r\n    } />\r\n  )\r\n}\r\n\r\nexport default ProtectedRoute;","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\hooks\\useLocalStorage.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\helpers\\inputs.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\helpers\\httpRequests.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\Tasks\\index.js",["148","149"],"import { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport TaskCard from '../../components/TaskCard';\r\nimport EditableTaskCard from '../../components/TaskCard/EditableTaskCard';\r\nimport SelectableTaskCard from '../../components/TaskCard/SelectableTaskCard';\r\n\r\nimport { GetData } from '../../helpers/httpRequests';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    color: '#6CEF1F',\r\n    textAlign: 'center',\r\n    width: '100%',\r\n  },\r\n  columns: {\r\n    textAlign: 'center',\r\n    display: 'flex',\r\n    width: '100%',\r\n  },\r\n  column: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    width: '40%',\r\n    padding: '5%',\r\n  },\r\n  addTasksButton: {\r\n    backgroundColor: '#4DBD0C',\r\n  }\r\n})\r\n\r\nexport default function Tasks() {\r\n  const classes = useStyles();\r\n\r\n  const [values, setValues] = useState({\r\n    tasks: []\r\n  })\r\n\r\n  const [fetchedData, setFetchedData] = useState({\r\n    tasks: null\r\n  })\r\n\r\n  useEffect(() => {\r\n    /*\r\n    GetData('some url')\r\n      .then(res => {\r\n        setFetchedData({ tasks: res })\r\n      })\r\n      */\r\n      let someTasks = [\r\n        {\r\n          id: 0,\r\n          taskName: 'some task',\r\n          minutes: 30,\r\n          notes: 'asdfasdlfjks'\r\n        },\r\n        {\r\n          id: 1,\r\n          taskName: 'some task',\r\n          minutes: 30,\r\n          notes: 'asdfasdlfjks'\r\n        },\r\n        {\r\n          id: 2,\r\n          taskName: 'some task',\r\n          minutes: 30,\r\n          notes: 'asdfasdlfjks'\r\n        },\r\n        {\r\n          id: 3,\r\n          taskName: 'some task',\r\n          minutes: 30,\r\n          notes: 'asdfasdlfjks'\r\n        },\r\n        {\r\n          id: 4,\r\n          taskName: 'some task',\r\n          minutes: 30,\r\n          notes: 'asdfasdlfjks'\r\n        },\r\n        {\r\n          id: 5,\r\n          taskName: 'some task',\r\n          minutes: 30,\r\n          notes: 'asdfasdlfjks'\r\n        },\r\n        {\r\n          id: 6,\r\n          taskName: 'some task',\r\n          minutes: 30,\r\n          notes: 'asdfasdlfjks'\r\n        }\r\n      ]\r\n\r\n      setFetchedData({ tasks: someTasks })\r\n\r\n      setValues({ tasks: someTasks })\r\n  }, [])\r\n\r\n  const handleTaskSelected = (index) => {\r\n    console.log(index)\r\n    // Need to remove from fetchedData and add to values, have a FD index so it\r\n    // can return to the same spot in the array, values does not matter so much\r\n  }\r\n\r\n  const handleAddTasks = () => {\r\n\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.columns}>\r\n        <div className={classes.column}>\r\n          {fetchedData.tasks && fetchedData.tasks.map(task => (\r\n            <EditableTaskCard taskObj={task} handleTaskSelected={handleTaskSelected}/>\r\n          ))}\r\n        </div>\r\n        <div className={classes.column}>\r\n          {values.tasks && values.tasks.map(task => (\r\n            <SelectableTaskCard taskObj={task} handleTaskSelected={handleTaskSelected}/>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <Button className={classes.addTasksButton} onClick={handleAddTasks} variant=\"outlined\" size=\"large\">\r\n          Add Tasks\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TaskCard\\SelectableTaskCard.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TaskCard\\EditableTaskCard.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\EditTask.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\Profile\\index.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\containers\\Analytics\\index.js",[],{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","severity":1,"message":"155","line":63,"column":6,"nodeType":"156","endLine":63,"endColumn":8,"suggestions":"157"},{"ruleId":"150","replacedBy":"158"},{"ruleId":"152","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":1,"column":31,"nodeType":"162","messageId":"163","endLine":1,"endColumn":41},{"ruleId":"160","severity":1,"message":"161","line":1,"column":10,"nodeType":"162","messageId":"163","endLine":1,"endColumn":20},{"ruleId":"160","severity":1,"message":"164","line":1,"column":22,"nodeType":"162","messageId":"163","endLine":1,"endColumn":31},{"ruleId":"160","severity":1,"message":"165","line":1,"column":33,"nodeType":"162","messageId":"163","endLine":1,"endColumn":41},{"ruleId":"160","severity":1,"message":"166","line":8,"column":8,"nodeType":"162","messageId":"163","endLine":8,"endColumn":25},{"ruleId":"160","severity":1,"message":"167","line":7,"column":8,"nodeType":"162","messageId":"163","endLine":7,"endColumn":24},{"ruleId":"160","severity":1,"message":"168","line":12,"column":10,"nodeType":"162","messageId":"163","endLine":12,"endColumn":18},{"ruleId":"160","severity":1,"message":"169","line":36,"column":7,"nodeType":"162","messageId":"163","endLine":36,"endColumn":17},{"ruleId":"160","severity":1,"message":"170","line":50,"column":23,"nodeType":"162","messageId":"163","endLine":50,"endColumn":37},{"ruleId":"160","severity":1,"message":"164","line":1,"column":32,"nodeType":"162","messageId":"163","endLine":1,"endColumn":41},{"ruleId":"160","severity":1,"message":"171","line":7,"column":8,"nodeType":"162","messageId":"163","endLine":7,"endColumn":19},{"ruleId":"160","severity":1,"message":"167","line":7,"column":8,"nodeType":"162","messageId":"163","endLine":7,"endColumn":24},{"ruleId":"160","severity":1,"message":"168","line":12,"column":10,"nodeType":"162","messageId":"163","endLine":12,"endColumn":18},{"ruleId":"160","severity":1,"message":"169","line":36,"column":7,"nodeType":"162","messageId":"163","endLine":36,"endColumn":17},{"ruleId":"160","severity":1,"message":"170","line":52,"column":23,"nodeType":"162","messageId":"163","endLine":52,"endColumn":37},{"ruleId":"160","severity":1,"message":"170","line":6,"column":23,"nodeType":"162","messageId":"163","endLine":6,"endColumn":37},{"ruleId":"160","severity":1,"message":"172","line":5,"column":8,"nodeType":"162","messageId":"163","endLine":5,"endColumn":16},{"ruleId":"160","severity":1,"message":"173","line":9,"column":10,"nodeType":"162","messageId":"163","endLine":9,"endColumn":17},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'appContext.tasks', 'duration', 'tod', and 'values'. Either include them or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.","ArrayExpression",["176"],["174"],["175"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","'AccountCircleIcon' is defined but never used.","'FormControlLabel' is defined but never used.","'PostData' is defined but never used.","'appContext' is assigned a value but never used.","'setAccessToken' is assigned a value but never used.","'NewTaskForm' is defined but never used.","'TaskCard' is defined but never used.","'GetData' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"177","fix":"178"},"Update the dependencies array to be: [appContext.tasks, duration, tod, values]",{"range":"179","text":"180"},[1580,1582],"[appContext.tasks, duration, tod, values]"]
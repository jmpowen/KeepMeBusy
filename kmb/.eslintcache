[{"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\routes\\App\\index.js":"1","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\routes\\Home\\index.js":"2","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\index.js":"3","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\reportWebVitals.js":"4","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\NewTaskForm.js":"5","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\AppContext.js":"6","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\AppState.js":"7","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\AppReducer.js":"8","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\types.js":"9","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TaskCard.js":"10","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TaskRoller.js":"11","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TimeOfDay.js":"12","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\Header.js":"13","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\Footer.js":"14","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\helpers\\SelectRandomTask.js":"15","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\routes\\Timer\\index.js":"16","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\CountdownTimer.js":"17"},{"size":1164,"mtime":1613322325761,"results":"18","hashOfConfig":"19"},{"size":4712,"mtime":1613322370586,"results":"20","hashOfConfig":"19"},{"size":574,"mtime":1610408058157,"results":"21","hashOfConfig":"19"},{"size":362,"mtime":1606676319960,"results":"22","hashOfConfig":"19"},{"size":5227,"mtime":1612228669613,"results":"23","hashOfConfig":"19"},{"size":107,"mtime":1611098590920,"results":"24","hashOfConfig":"19"},{"size":1143,"mtime":1612301447437,"results":"25","hashOfConfig":"19"},{"size":735,"mtime":1612301399538,"results":"26","hashOfConfig":"19"},{"size":135,"mtime":1612301395445,"results":"27","hashOfConfig":"19"},{"size":1072,"mtime":1612225954380,"results":"28","hashOfConfig":"19"},{"size":3159,"mtime":1612314179584,"results":"29","hashOfConfig":"19"},{"size":1994,"mtime":1612224617687,"results":"30","hashOfConfig":"19"},{"size":428,"mtime":1612224728961,"results":"31","hashOfConfig":"19"},{"size":1046,"mtime":1612303110626,"results":"32","hashOfConfig":"19"},{"size":622,"mtime":1612296762463,"results":"33","hashOfConfig":"19"},{"size":195,"mtime":1613325646250,"results":"34","hashOfConfig":"19"},{"size":519,"mtime":1613327754782,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"etp770",{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"38"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\routes\\App\\index.js",[],["73","74"],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\routes\\Home\\index.js",["75","76"],"import { useState, useContext, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nimport NewTaskForm from '../../components/NewTaskForm';\r\nimport TaskRoller from '../../components/TaskRoller';\r\nimport TimeOfDay from '../../components/TimeOfDay';\r\n\r\nimport AppContext from '../../context/AppContext';\r\n\r\nimport Timer from '../../components/ATimer';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    textAlign: 'center',\r\n    fontFamily: 'sans-serif',\r\n    fontSize: '30px'\r\n  },\r\n  columns: {\r\n    textAlign: 'center',\r\n    display: 'flex',\r\n    width: '100%',\r\n  },\r\n  column: {\r\n    width: '33.3%',\r\n    background: '#1abc9c',\r\n  },\r\n  card: {\r\n    boxShadow: '0 8px 24px 0 rgba(0,0,0,0.12)',\r\n    margin: 50,\r\n    padding: 12,\r\n    borderRadius: '1.5rem',\r\n  },\r\n  cardHeader: {\r\n    background: '#1abc9c',\r\n    color: 'white',\r\n    fontFamily: 'sans-serif',\r\n    borderRadius: '1.5rem',\r\n  },\r\n  column1: {\r\n    textAlign: 'center',\r\n    fontFamily: 'sans-serif',\r\n    fontSize: '30px'\r\n  },\r\n  title: {\r\n    color: 'white'\r\n  }\r\n})\r\n\r\nexport default function Home() {\r\n  const classes = useStyles();\r\n  const appContext = useContext(AppContext);\r\n\r\n  const [values, setValues] = useState({\r\n    taskNum: null,\r\n    taskTime: false,\r\n    duration: 60,\r\n    anytime: false,\r\n    morning: false,\r\n    afternoon: false,\r\n    night: false,\r\n    tod: [],\r\n    currentTask: null,\r\n  })\r\n\r\n  useEffect(() => {\r\n    console.log('here')\r\n    setValues({\r\n      ...values,\r\n      currentTask: appContext.currentTask\r\n    })\r\n  }, [appContext.currentTask])\r\n\r\n  const handleDurationChange = (e, newValue) => {\r\n    setValues({\r\n      ...values,\r\n      duration: newValue\r\n    })\r\n  }\r\n\r\n  const handleClick = event => {\r\n    if (!appContext.tasks) {\r\n      // Alert the user there is no tasks \r\n    } else {\r\n      let tod = [];\r\n\r\n      if (values.morning) {\r\n        tod.push('morning')\r\n      }\r\n      if (values.afternoon) {\r\n        tod.push('afternoon')\r\n      }\r\n      if (values.night) {\r\n        tod.push('night')\r\n      }\r\n      if (values.anytime) {\r\n        tod.push('anytime')\r\n      }\r\n\r\n      setValues({\r\n        ...values,\r\n        taskTime: true,\r\n        tod: tod,\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.columns}>\r\n        <div className={classes.column}>\r\n          <div className={classes.column1}>\r\n            <Card className={classes.card}>\r\n              <Box className={classes.cardHeader}>\r\n                <Typography variant=\"h4\" component=\"h4\">\r\n                  New Task\r\n                </Typography>\r\n                <NewTaskForm />\r\n              </Box>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n        <div className={classes.column}>\r\n          <div className={classes.title}>\r\n            Wondering what to do right now?\r\n          </div>\r\n          {appContext.currentTask === null && values.taskTime\r\n            ? <TaskRoller duration={values.duration} tod={values.tod} />\r\n            : <div>\r\n                <Slider\r\n                  min={0}\r\n                  step={30}\r\n                  max={300}\r\n                  marks\r\n                  value={values.duration}\r\n                  onChange={handleDurationChange}\r\n                  valueLabelDisplay=\"auto\"\r\n                />\r\n                <TimeOfDay \r\n                  row={true} \r\n                  values={values} \r\n                  setValues={setValues} />\r\n                <Button \r\n                  disabled={appContext.tasks.length === 0 || values.duration === 0 || (values.anytime === false && values.morning === false && values.afternoon === false && values.night === false)} \r\n                  variant=\"contained\" \r\n                  color=\"primary\" \r\n                  onClick={handleClick}>Click Me!</Button>\r\n              </div>\r\n          }\r\n        </div>\r\n        <div className={classes.column}>\r\n          {/* TODO: Timer over here with last task, if ongoing - time is counting down from the initial time that was given when created,\r\n            if ongoing (and 'Click Me' is pressed) - a red 'X' appears over the timer and task is reported as incompleted \r\n            if done (timer expired) - green checkmark shows and  task is reported as completed*/}\r\n          {values.currentTask !== null ?\r\n            <div>\r\n              hello\r\n            </div>\r\n            : null\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\index.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\reportWebVitals.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\NewTaskForm.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\AppContext.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\AppState.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\AppReducer.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\context\\types.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TaskCard.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TaskRoller.js",["77"],"import { useContext, useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport DoneOutlineIcon from '@material-ui/icons/DoneOutline';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\n\r\nimport AppContext from '../context/AppContext';\r\n\r\nimport { RandomTask } from '../helpers/SelectRandomTask';\r\n\r\n/**\r\n * Design Goals:\r\n *  - Need to have accept reject buttons span 100% across the card, dividing card in half\r\n *  - Have card centered\r\n *  - \r\n */\r\nconst useStyles = makeStyles({\r\n  root: {\r\n\r\n  },\r\n  accept: {\r\n    backgroundColor: 'green',\r\n    color: 'white'\r\n  },\r\n  reject: {\r\n    backgroundColor: 'red',\r\n    color: 'white'\r\n  }\r\n})\r\n\r\nexport default function TaskRoller({ duration, tod }) {\r\n  const classes = useStyles();\r\n  const appContext = useContext(AppContext);\r\n\r\n  const [values, setValues] = useState({\r\n    tasks: null,\r\n    taskNo: 0,\r\n  })\r\n\r\n  const handleAccept = () => {\r\n    let task = values.tasks[values.taskNo];\r\n    appContext.newCurrentTask({\r\n      task\r\n    });\r\n  }\r\n\r\n  const handleReject = () => {\r\n    setValues({\r\n      ...values,\r\n      taskNo: values.taskNo + 1,\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    let theTasks = RandomTask(appContext.tasks, duration, tod);\r\n    setValues({\r\n      ...values,\r\n      tasks: theTasks,\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      {values.tasks ?\r\n        values.taskNo !== values.tasks.length ?\r\n          <div>\r\n            <Card className={classes.root}>\r\n              <CardContent>\r\n                <Typography variant=\"h5\" component=\"h2\" >\r\n                  {values.tasks[values.taskNo].taskName}\r\n                </Typography>\r\n                <Typography color=\"textSecondary\">\r\n                  {values.tasks[values.taskNo].minutes} minutes\r\n                </Typography>\r\n                <Typography color=\"textSecondary\">\r\n                  {values.tasks[values.taskNo].notes}\r\n                </Typography>\r\n              </CardContent>\r\n              <CardActions>\r\n                <IconButton className={classes.accept} onClick={handleAccept} color=\"primary\" aria-label=\"check\" component=\"span\">\r\n                  <DoneOutlineIcon />\r\n                </IconButton>\r\n                <IconButton className={classes.reject} onClick={handleReject} color=\"secondary\" aria-label=\"check\" component=\"span\">\r\n                  <CloseIcon />\r\n                </IconButton>\r\n              </CardActions>\r\n            </Card>\r\n          </div>\r\n          : \r\n          <div>\r\n            <Card className={classes.root}>\r\n              <CardContent>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                  There are no more tasks available with these filters.\r\n                  Go read a book.\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n        : null\r\n      }\r\n    </>\r\n  )\r\n}","C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\TimeOfDay.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\Header.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\Footer.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\helpers\\SelectRandomTask.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\routes\\Timer\\index.js",[],"C:\\Users\\jacks-laptop\\GIT\\KeepMeBusy\\kmb\\src\\components\\CountdownTimer.js",[],{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","severity":1,"message":"83","line":15,"column":8,"nodeType":"84","messageId":"85","endLine":15,"endColumn":13},{"ruleId":"86","severity":1,"message":"87","line":76,"column":6,"nodeType":"88","endLine":76,"endColumn":30,"suggestions":"89"},{"ruleId":"86","severity":1,"message":"90","line":65,"column":6,"nodeType":"88","endLine":65,"endColumn":8,"suggestions":"91"},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"no-unused-vars","'Timer' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'values'. Either include it or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.","ArrayExpression",["94"],"React Hook useEffect has missing dependencies: 'appContext.tasks', 'duration', 'tod', and 'values'. Either include them or remove the dependency array. You can also do a functional update 'setValues(v => ...)' if you only need 'values' in the 'setValues' call.",["95"],"no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},"Update the dependencies array to be: [appContext.currentTask, values]",{"range":"100","text":"101"},"Update the dependencies array to be: [appContext.tasks, duration, tod, values]",{"range":"102","text":"103"},[1795,1819],"[appContext.currentTask, values]",[1596,1598],"[appContext.tasks, duration, tod, values]"]